// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// aCAPf1f2_cpp
NumericMatrix aCAPf1f2_cpp(List Jfunc1_ext_ls, List Jfunc2_ext_ls, double alpha, int max_drv);
RcppExport SEXP _aCAP_aCAPf1f2_cpp(SEXP Jfunc1_ext_lsSEXP, SEXP Jfunc2_ext_lsSEXP, SEXP alphaSEXP, SEXP max_drvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Jfunc1_ext_ls(Jfunc1_ext_lsSEXP);
    Rcpp::traits::input_parameter< List >::type Jfunc2_ext_ls(Jfunc2_ext_lsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_drv(max_drvSEXP);
    rcpp_result_gen = Rcpp::wrap(aCAPf1f2_cpp(Jfunc1_ext_ls, Jfunc2_ext_ls, alpha, max_drv));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_aCAP_aCAPf1f2_cpp", (DL_FUNC) &_aCAP_aCAPf1f2_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_aCAP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
